#!/bin/bash
function f() {
	find . -name "$1"
}

function bak() {
	cp "$1" "$1.bak"
}

function gh() {
	history | grep "$1"
}

function ghi() {
	history | grep -i "$1"
}

# fuzzy grep open via ag with line number
if command -v ag >/dev/null; then
  vg() {
    local file
    local line

    OPTIONS=$(ag --nobreak --noheading "$@" | fzf -0 -1 | awk -F: '{print $1, $2}')
    read -r file line <<<"${OPTIONS}"
    echo "FILE = ${file}, LINE = ${line}"

    if [[ -n $file ]]
    then
       vim $file +$line
    fi
  }
fi

# Find a usable agent - fixes screen and tmux
function ssh-reagent () {
  export SSH_AUTH_SOCK=$(find /tmp/ssh-* -user `whoami` -name agent\* -printf '%T@ %p\n' 2>/dev/null | sort -k 1nr | sed 's/^[^ ]* //' | head -n 1)
  if ssh-add -l >/dev/null ; then
    echo Found working SSH Agent:
    ssh-add -l
    return
  fi
  echo Cannot find ssh agent - maybe you should reconnect and forward it?
}

# count the number of open files for a user
function ofiles() {
  sudo lsof -u "$1" | awk 'BEGIN { total = 0; } $4 ~ /^[0-9]/ { total += 1 } END { print total }'
}

# kill old user processes
function sak { ps aux | grep $1 | grep -v grep | awk '{ print $2 }' | xargs sudo kill ;}
function sak9 { ps aux | grep $1 | grep -v grep | awk '{ print $2 }' | xargs sudo kill -9 ;}

# Show what processes are using swap space
function swapuse() {
  for file in /proc/*/status ; do awk '/VmSwap|Name/{printf $2 " " $3}END{ print ""}' $file; done | sort -k 2 -n -r | less
}

if [[ $HOSTNAME = "server1" || $HOSTNAME = "lxc-nas" ]]; then
	function mediaPermissions() {
		sudo chown -R media.media $1
		sudo chmod -R ug=rwX,o-rwx $1
	}
fi

# Decode JWT Token
jwtd() {
    if [[ -x $(command -v jq) ]]; then
         jq -R 'split(".") | .[0],.[1] | @base64d | fromjson' <<< "${1}"
         echo "Signature: $(echo "${1}" | awk -F'.' '{print $3}')"
    fi
}

# Convert hostname to mac address
hostname_to_macaddress() {
  local H
  H=$(hostname)
  if [ -n "$1" ]; then
    H="$1"
  fi
  echo "$H" | md5sum | sed 's/^\(..\)\(..\)\(..\)\(..\)\(..\).*$/02:\1:\2:\3:\4:\5/'
}

# Replicate gnu watch command on freebsd systems
if [ "$(uname -s)" = "FreeBSD" ]; then
  watch() {
    local interval=2
    local diff_mode=0
    local cumulative=0
    local has_previous=0

    while [[ $# -gt 0 ]]; do
      case "$1" in
        -n) interval="$2"; shift 2 ;;
        # Diff and cumulative mode still don't work quite correctly so disabling them for now
        # -d) diff_mode=1; shift ;;
        # -c) diff_mode=1; cumulative=1; shift ;;
        --) shift; break ;;
        *) break ;;
      esac
    done

    local cmd=("$@")
    local tmp_old="$(mktemp -t watch_old)"
    local tmp_new="$(mktemp -t watch_new)"
    local tmp_cum="$(mktemp -t watch_cum)"
    trap 'rm -f "$tmp_old" "$tmp_new" "$tmp_cum"; tput cnorm' EXIT

    : > "$tmp_old"
    : > "$tmp_cum"

    # Highlight changed characters between files line-by-line
    highlight_diffs() {
      local old="$1" new="$2"
      local output_buffer=""
      local i=0

      while IFS= read -r new_line && [ "$i" -lt "$body_lines" ]; do
        IFS= read -r old_line <&3 || old_line=""
        local out_line=""
        local j=0
        local len_new="${#new_line}"
        local len_old="${#old_line}"
        local max_len=$(( len_new > len_old ? len_new : len_old ))

        while [ "$j" -lt "$max_len" ]; do
          local char_new="${new_line:$j:1}"
          local char_old="${old_line:$j:1}"
          if [ "$char_new" != "$char_old" ]; then
            out_line+=$'\033[7m'"${char_new:- }"$'\033[0m'
          else
            out_line+="${char_new:- }"
          fi
          j=$((j + 1))
        done

        # Ensure reset at end of line to avoid highlight leakage
        if [[ "$out_line" != *$'\033[0m' ]]; then
          # out_line+=$'\033[0m'
          out_line+=" "$'\033[0m'
        fi
        output_buffer+="${out_line}"$'\n'
        i=$((i + 1))
      done 3<"$old" <"$new"

      printf "%s" "$output_buffer"
    }

    # Pad ANSI-colored lines to terminal width
    pad_line_to_width() {
      local raw_line="$1"
      local visible_len stripped
      stripped=$(printf "%s" "$raw_line" | sed -E 's/\x1B\[[0-9;]*[mK]//g')
      visible_len=${#stripped}

      if [ "$visible_len" -lt "$term_cols" ]; then
        local pad=$((term_cols - visible_len))
        printf "%s%*s\n" "$raw_line" "$pad" ""
      else
        printf "%s\n" "$raw_line"
      fi
    }

    while :; do
      local term_lines term_cols header_lines body_lines
      term_lines=$(tput lines)
      term_cols=$(tput cols)
      header_lines=3
      body_lines=$((term_lines - header_lines))

      tput civis
      printf "\033[H"

      local now
      now="$(date '+%Y-%m-%d %H:%M:%S')"
      printf "%-${term_cols}s\n" "Every ${interval}s: ${cmd[*]}    $now"
      printf "%-${term_cols}s\n" "----------------------------------------------------"

      "${cmd[@]}" > "$tmp_new" 2>&1
      head -n "$body_lines" "$tmp_new" > "$tmp_new.body"

      local body_output
      if [ "$diff_mode" -eq 1 ]; then
        if [ "$has_previous" -eq 1 ]; then
          if [ "$cumulative" -eq 1 ]; then
            body_output=$(highlight_diffs "$tmp_cum" "$tmp_new.body")
            cp "$tmp_new.body" "$tmp_cum"
          else
            body_output=$(highlight_diffs "$tmp_old" "$tmp_new.body")
            cp "$tmp_new.body" "$tmp_old"
          fi
        else
          body_output=$(cat "$tmp_new.body")
          if [ "$cumulative" -eq 1 ]; then
            cp "$tmp_new.body" "$tmp_cum"
          else
            cp "$tmp_new.body" "$tmp_old"
          fi
          has_previous=1
        fi
      else
        body_output=$(cat "$tmp_new.body")
      fi

      IFS=$'\n' read -rd '' -a lines <<< "$body_output"
      for ((i = 0; i < body_lines; i++)); do
        pad_line_to_width "${lines[i]}"
      done

      sleep "$interval"
    done
  }
fi

# Only add if perl is installed
if command -v perl >/dev/null 2>&1; then
  wget_and_scan() {
    local url="$1"
    local scanner_host="lxc-scanner.debugplus.net"
    local scanner_port=3310

    if [[ -z "$url" ]]; then
      echo "Usage: wget_and_scan <url>"
      return 1
    fi

    local filename tmpfile resultfile
    filename=$(basename "$url")
    tmpfile=$(mktemp /tmp/wgetscan.XXXXXX)
    resultfile=$(mktemp /tmp/clamdresult.XXXXXX)

    echo "[*] Downloading: $url"
    if ! wget -q -O "$tmpfile" "$url"; then
      echo "[!] Failed to download file."
      rm -f "$tmpfile" "$resultfile"
      return 2
    fi

    echo "[*] Scanning with clamd at $scanner_host:$scanner_port..."
    {
      printf "nINSTREAM\n"
      dd if="$tmpfile" bs=8192 status=none | perl -e '
        binmode STDIN;
        binmode STDOUT;
        while (read STDIN, $chunk, 8192) {
          print pack("N", length($chunk)) . $chunk;
        }
        print pack("N", 0);
      '
    } | nc "$scanner_host" "$scanner_port" > "$resultfile"

    echo -n "[*] clamd result: "
    cat "$resultfile"

    if grep -q "FOUND" "$resultfile"; then
      echo "[!] Virus detected — file will not be saved."
      rm -f "$tmpfile" "$resultfile"
      return 3
    elif ! grep -qFx "stream: OK" "$resultfile"; then
      echo "[!] Unexpected scan result — file will not be saved."
      rm -f "$tmpfile" "$resultfile"
      return 4
    fi

    echo "[+] File clean. Saving as: $filename"
    mv "$tmpfile" "./$filename"
    rm -f "$resultfile"
  }
fi
