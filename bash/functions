#!/bin/bash
function f() {
	find . -name "$1"
}

function bak() {
	cp "$1" "$1.bak"
}

function gh() {
	history | grep "$1"
}

function ghi() {
	history | grep -i "$1"
}

# fuzzy grep open via ag with line number
if command -v ag >/dev/null; then
  vg() {
    local file
    local line

    OPTIONS=$(ag --nobreak --noheading "$@" | fzf -0 -1 | awk -F: '{print $1, $2}')
    read -r file line <<<"${OPTIONS}"
    echo "FILE = ${file}, LINE = ${line}"

    if [[ -n $file ]]
    then
       vim $file +$line
    fi
  }
fi

# Find a usable agent - fixes screen and tmux
function ssh-reagent () {
  export SSH_AUTH_SOCK=$(find /tmp/ssh-* -user `whoami` -name agent\* -printf '%T@ %p\n' 2>/dev/null | sort -k 1nr | sed 's/^[^ ]* //' | head -n 1)
  if ssh-add -l >/dev/null ; then
    echo Found working SSH Agent:
    ssh-add -l
    return
  fi
  echo Cannot find ssh agent - maybe you should reconnect and forward it?
}

# count the number of open files for a user
function ofiles() {
  sudo lsof -u "$1" | awk 'BEGIN { total = 0; } $4 ~ /^[0-9]/ { total += 1 } END { print total }'
}

# kill old user processes
function sak { ps aux | grep $1 | grep -v grep | awk '{ print $2 }' | xargs sudo kill ;}
function sak9 { ps aux | grep $1 | grep -v grep | awk '{ print $2 }' | xargs sudo kill -9 ;}

# Show what processes are using swap space
function swapuse() {
  for file in /proc/*/status ; do awk '/VmSwap|Name/{printf $2 " " $3}END{ print ""}' $file; done | sort -k 2 -n -r | less
}

if [[ $HOSTNAME = "server1" || $HOSTNAME = "lxc-nas" ]]; then
	function mediaPermissions() {
		sudo chown -R media.media $1
		sudo chmod -R ug=rwX,o-rwx $1
	}
fi

# Decode JWT Token
jwtd() {
    if [[ -x $(command -v jq) ]]; then
         jq -R 'split(".") | .[0],.[1] | @base64d | fromjson' <<< "${1}"
         echo "Signature: $(echo "${1}" | awk -F'.' '{print $3}')"
    fi
}

# Convert hostname to mac address
hostname_to_macaddress() {
  local H
  H=$(hostname)
  if [ -n "$1" ]; then
    H="$1"
  fi
  echo "$H" | md5sum | sed 's/^\(..\)\(..\)\(..\)\(..\)\(..\).*$/02:\1:\2:\3:\4:\5/'
}

# Enable only if ncat or socat exists (clamdscan local won't work with remote server)
if command -v ncat >/dev/null 2>&1; then
  wget_and_scan() {
    local url="$1"
    local scanner_host="192.168.8.119"  # replace with your lxc-scanner IP
    local scanner_port=3310

    if [[ -z "$url" ]]; then
      echo "Usage: wget_and_scan <url>"
      return 1
    fi

    local filename
    filename=$(basename "${url}")
    local tmpfile
    tmpfile=$(mktemp /tmp/wgetscan.XXXXXX)

    echo "[*] Downloading: $url"
    if ! wget -q -O "$tmpfile" "$url"; then
      echo "[!] Failed to download file."
      rm -f "$tmpfile"
      return 2
    fi

    echo "[*] Scanning with remote clamd at $scanner_host:$scanner_port..."
    (
      printf 'zINSTREAM\n'
      dd if="$tmpfile" bs=1024 2>/dev/null | while read -r -n 8192 chunk; do
        printf "$(printf '%08x' ${#chunk})"
        printf "%s" "$chunk"
      done
      printf '00000000'
    ) | ncat "$scanner_host" "$scanner_port" > /tmp/wgetscan.result

    if grep -q "FOUND" /tmp/wgetscan.result; then
      echo "[!] Virus detected — file will not be saved."
      rm -f "$tmpfile" /tmp/wgetscan.result
      return 3
    fi

    echo "[+] File clean. Saving as: $filename"
    mv "$tmpfile" "./$filename"
    rm -f /tmp/wgetscan.result
  }
else
  echo "ncat not found — wget_and_scan() disabled"
fi
