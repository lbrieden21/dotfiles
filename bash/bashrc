# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

if [ -f /opt/local/etc/profile.d/bash_completion.sh ]; then
	. /opt/local/etc/profile.d/bash_completion.sh
fi

if [[ $HOSTNAME = 'lbriedendev.com' || $HOSTNAME = 'lbrieden-mbp' ]]; then
	export PATH=/opt/local/bin:/opt/local/sbin:/opt/local/sbin/apache2:/opt/local/lib/percona/bin:/opt/local/lib/php/bin:/Users/lbrieden/bin:/Users/lbrieden/Downloads/apache-jmeter-3.1/bin:$PATH
	export SERVER='lbriedendev.com'
	export SERVERDIR='/web/lbriedendev.com'
	export SANDBOX=$SERVERDIR
	export DBSERVER='localhost'
	BAKHOST='server1'
	#if [ "$TERM_PROGRAM" == "Apple_Terminal" ]; then
		#export TERM='xterm'
		#export COLORTERM='xterm-256color'
	#else
		#export TERM='xterm'
		#export COLORTERM='xterm-256color'
	#fi

	alias ls='gls --color --group-directories-first'
	#alias svn=/opt/local/bin/svn
	#alias git=/opt/local/bin/git
	#alias svn=/usr/bin/svn
	#alias conscsh='ssh -fN -L 8080:localhost:8080 lbrieden@scsh01.alchemysystems.com'
	#alias disscsh='pkill -KILL -f ssh.*8080:localhost:8080'
	alias conscsh='ssh -fND 10132 lbrieden@scsh01.alchemysystems.com'
	alias disscsh='pkill -KILL -f ssh.*-fND.*10132.*lbrieden@scsh01.alchemysystems.com'
	alias svndiff='svn diff --diff-cmd=svndiff_helper'
	# use downloaded mvim instead of slightly newer port /opt/local/bin/mvim for python support for php xdebug module
	#alias mvim='~/Downloads/MacVim-snapshot-74/mvim'
	alias mvim='/opt/local/bin/mvim'
	alias vim='mvim -v'
	alias vimdiff='mvimdiff -v'
	alias showAllFilesY='defaults write com.apple.finder AppleShowAllFiles YES'
	alias showAllFilesN='defaults write com.apple.finder AppleShowAllFiles NO'
	alias cigrep="~/bin/cigrep.mod"
	alias ussh="updateSshConfig"
	alias edapache="sudo vi /opt/local/etc/apache2/httpd.conf"
	alias reapache="sudo /opt/local/sbin/apachectl -k restart"
	alias flushdnscache="sudo dscacheutil -flushcache"
	alias ccaccept="php codecept.phar run -c projects/ets acceptance"
	alias ccfunctional="php codecept.phar run -c projects/ets functional"
	alias ccbuildets="php codecept.phar build -c projects/ets"
	alias cccleartmp="find ../../public/{download,upload,logs}/ -type f -delete ; find tests/_output/ -type f -delete"
	alias phpunit="/usr/bin/phpunit"
	alias phpunit-skelgen="/usr/bin/phpunit-skelgen"
	alias arduinoBuildDirs="ls -ldrt $TMPDIR/build*"
	#alias grabEtsDbStatus="scp etsdb01:/var/log/mysql-status/$(gdate --date='yesterday' +%A) ~/Desktop/ets/Support/etsdb01_mysql-status/etsdb01_mysql-status_$(gdate --date='yesterday' +%Y%m%d)"

	function startPhantomJs() {
		if [ -z $(pgrep phantom) ]; then
			echo "Starting PhantomJS: "
			# nohup phantomjs --webdriver=4444 > /Users/lbrieden/logs/phantomjs.log &
			nohup phantomjs --webdriver=4444 --ignore-ssl-errors=true --ssl-protocol=any > /Users/lbrieden/logs/phantomjs.log &
		else
			echo "PhantomJS already running: "`pgrep phantomjs`
		fi
	}

	function startSelenium() {
		if [ -z $(pgrep -f selenium) ]; then
			echo "Starting Selenium Standalone Server: "
			#nohup java -jar ~/Downloads/selenium-server-standalone-2.43.1.jar >> /Users/lbrieden/logs/selenium-server.log &
			#nohup java -jar ~/Downloads/selenium-server-standalone-2.45.0.jar >> /Users/lbrieden/logs/selenium-server.log &
			#nohup java -jar ~/Downloads/selenium-server-standalone-2.53.0.jar >> /Users/lbrieden/logs/selenium-server.log &
			#nohup java -jar ~/Downloads/selenium-server-standalone-3.0.0-beta4.jar >> /Users/lbrieden/logs/selenium-server.log &
			nohup java -jar ~/Downloads/selenium-server-standalone-3.6.0.jar > /Users/lbrieden/logs/selenium-server.log &
		else
			echo "Selenium Standalone Server already running: "`pgrep -f selenium`
		fi
	}

	function tomcatControl() {
		local tomcatVer="7.0.54"
		local tomcatDir="/Users/lbrieden/tomcat/apache-tomcat-$tomcatVer"
		local currentDb=$(readlink $tomcatDir/conf/server.xml | cut -d'-' -f1)
		local currentCon=$(readlink $tomcatDir/conf/context.xml)
		local currentServ=$(readlink $tomcatDir/conf/server.xml)
		if [ "$1" = "start" ]; then
			if [ -z "$2" -o "$2" = "$currentDb" ]; then
				if [[ -z $(ps aux | grep '[a]pache-tomcat') ]]; then
					echo "Starting tomcat with $currentDb database"
					$tomcatDir/bin/startup.sh
				else
					echo "Tomcat already running with $currentDb database"
				fi
			elif [ -e "$tomcatDir/conf/$2-context.xml" -a -e "$tomcatDir/conf/$2-server.xml" ]; then
				if [ "$currentCon" != "$tomcatDir/conf/$2-context.xml" ]; then
					echo "Changing context.xml link from $currentCon to $2-context.xml"
					cd $tomcatDir/conf
					ln -sf $2-context.xml context.xml
					cd -
				fi
				if [ "$currentServ" != "$tomcatDir/conf/$2-server.xml" ]; then
					echo "Changing server.xml link from $currentServ to $2-server.xml"
					cd $tomcatDir/conf
					ln -sf $2-server.xml server.xml
					cd -
				fi
				echo "Starting tomcat with $2 database"
				$tomcatDir/bin/startup.sh
			else
				echo "Error: There are no configuration files for database $2. Make sure it is a valid database and then try running 'tomcatControl create $2'."
			fi
		elif [ "$1" = "stop" ]; then
			if [[ -z $(ps aux | grep -o '[a]pache-tomcat') ]]; then
				echo "Tomcat is not running"
			else
				echo "Stopping Tomcat running with $currentDb database"
				$tomcatDir/bin/shutdown.sh
			fi
		elif [ "$1" = "restart" ]; then
			if [[ -z $(ps aux | grep '[a]pache-tomcat') ]]; then
				echo "Tomcat is not running"
			else
				echo "Stopping Tomcat running with $currentDb database"
				$tomcatDir/bin/shutdown.sh
			fi
			if [ -z "$2" -o "$2" = "$currentDb" ]; then
				echo "Restarting tomcat with $currentDb database"
				$tomcatDir/bin/startup.sh
			elif [ -e "$tomcatDir/conf/$2-context.xml" -a -e "$tomcatDir/conf/$2-server.xml" ]; then
				if [ "$currentCon" != "$tomcatDir/conf/$2-context.xml" ]; then
					echo "Changing context.xml link from $currentCon to $2-context.xml"
					cd $tomcatDir/conf
					ln -sf $2-context.xml context.xml
					cd -
				fi
				if [ "$currentServ" != "$tomcatDir/conf/$2-server.xml" ]; then
					echo "Changing server.xml link from $currentServ to $2-server.xml"
					cd $tomcatDir/conf
					ln -sf $2-server.xml server.xml
					cd -
				fi
				echo "Restarting tomcat with $2 database"
				$tomcatDir/bin/startup.sh
			else
				echo "Error: There are no configuration files for database $2. Make sure it is a valid database and then try running 'tomcatControl create $2'."
			fi
		elif [ "$1" = "create" ]; then
			if [ -z "$2" ]; then
				echo "Error: 'tomcatControl create' requires the name of a database to create configuration files for."
			elif [ -e "$tomcatDir/conf/$2-context.xml" -o -e "$tomcatDir/conf/$2-server.xml" ]; then
				echo "Error: Configuration files for $2 database already exists. Try running 'tomcatControl start $2'."
			else
				echo "Creating configuration files for $2 database"
				cp $tomcatDir/conf/context.xml $tomcatDir/conf/$2-context.xml
				cp $tomcatDir/conf/server.xml $tomcatDir/conf/$2-server.xml
				/opt/local/bin/gsed -i -r -e "s/$currentDb/$2/g" $tomcatDir/conf/$2-context.xml
				/opt/local/bin/gsed -i -r -e "s/$currentDb/$2/g" $tomcatDir/conf/$2-server.xml
			fi
		else
			echo "Error: Illegal option. 'tomcatControl action [database]'. Available options are 'start, stop, restart, create'."
		fi
	}

	function updateSshConfig() {
		local alchemyhosts="fs01sb fs01test cc01test jnkmas01 jnkagt01 jnkagt02 jnkagt03 db01sb fs01prod sisdb fs01ets db01ets db02ets fs02etsdev db03etsdev jmeter01ets dbbackup01"
		if [[ -n $(ifconfig | grep ' 10.100.') ]]; then
			for h in $alchemyhosts
			do
				/opt/local/bin/gsed -i -r -e "/^Host $h/,+1 s/\tProxyCommand/\t#ProxyCommand/" ~/.ssh/config
			done
		else
			for h in $alchemyhosts
			do
				/opt/local/bin/gsed -i -r -e "/^Host $h/,+1 s/\t#ProxyCommand/\tProxyCommand/" ~/.ssh/config
			done
		fi
		if [[ -n $(ifconfig | grep ' 192.168.8.') ]]; then
			/opt/local/bin/gsed -i -r -e "/^Host server1/,+2 s/Hostname lb.dyndns-ip.com/Hostname 192.168.8.21/" ~/.ssh/config
			/opt/local/bin/gsed -i -r -e "/^Host mediaplayer1/,+1 s/\tProxyCommand/\t#ProxyCommand/" ~/.ssh/config
		else
			/opt/local/bin/gsed -i -r -e "/^Host server1/,+2 s/Hostname 192.168.8.21/Hostname lb.dyndns-ip.com/" ~/.ssh/config
			/opt/local/bin/gsed -i -r -e "/^Host mediaplayer1/,+1 s/\t#ProxyCommand/\tProxyCommand/" ~/.ssh/config
		fi
	}

	# Always update ssh config when .bashrc is processed
	#updateSshConfig

	function updateBashrc() {
		updateSshConfig
		echo 'fs01sb:'
		scp ~/.bashrc fs01sb:
		echo 'Server1:'
		scp ~/.bashrc server1:
		echo 'MediaPlayer1:'
		scp ~/.bashrc mediaplayer1:
	}

	complete -C "perl -e '@w=split(/ /,\$ENV{COMP_LINE},-1);\$w=pop(@w);for(qx(screen -ls)){print qq/\$1\n/ if (/^\s*\$w/&&/(\d+\.\w+)/||/\d+\.(\$w\w*)/)}'" screen

### Quickly change what branch sandbox is pointing to
	#function workon() {
		#if test ! -d "$SANDBOX/public.$1"
		#then
			#echo "public.$1: Does not exist" >&2
			#return
		#fi
		#cd $SANDBOX
		#echo "`date` workon $@" >> $SERVERDIR/worklog
		#rm public
		#ln -s public.$1 public
		#if test -h ~/$1
		#then
			#cd ~/$1/public
		#else
			#cd -P public
		#fi
		#pwd
	#}
	#complete -W "$(echo `ls --color=none $SANDBOX/svn`)" workon
fi

if [[ $HOSTNAME = 'fs01sb.dfw.alchemysystems.com' ]]; then
	export PATH=$PATH:$HOME/bin
	BAKHOST='aeric21@lb.dyndns-ip.com'

	alias ls='ls --color --group-directories-first'
fi

if [[ $HOSTNAME = 'lbriedendev.com' || $HOSTNAME = 'lbrieden-mbp' || $HOSTNAME = 'fs01dev.dfw.alchemysystems.com' ]]; then
	alias cdc="cd ~/codeception"
	alias removeTemplates='rm -rf templates_c/*'
fi

if [[ $HOSTNAME = 'scsh01.alchemysystems.com' ]]; then
	BAKHOST='aeric21@lb.dyndns-ip.com'
	alias ls='ls --color --group-directories-first'
fi

if [[ $HOSTNAME = 'Server1' ]]; then
	BAKHOST='localhost'

	function mediaPermissions() {
		sudo chown -R media.media $1
		sudo chmod -R ug=rwX,o-rwx $1
	}
fi

if [[ $HOSTNAME = 'MediaPlayer1' ]]; then
	BAKHOST='aeric21@192.168.8.21'
fi

if [[ $HOSTNAME = 'Server1' || $HOSTNAME = 'MediaPlayer1' ]]; then
	export TERM='xterm'
	export COLORTERM='gnome-256color'

	alias ls='ls --color --group-directories-first'
fi

shopt -s histappend
shopt -s extglob
shopt -s histverify

export HISTSIZE=100000
export HISTFILESIZE=$HISTSIZE
#export HISTCONTROL=erasedups:ignorespace
export HISTCONTROL=ignoredups
export EDITOR=vim
export FCEDIT=vim
export VISUAL=vim
## Aliases
#if ls --color > /dev/null 2>&1; then #GNU `ls`
#	colorflag="--color=always"
#	groupdirs="--group-directories-first"
#else # OS X `ls`
#	colorflag="-G"
#	groupdirs=""
#fi
# MacOS doesn't have dircolors program. Have to install coreutils and symlink to gdircolors
eval `dircolors ~/.dir_colors`
alias ll='ls -lh'
alias la='ls -lha'
alias lsa='ls -a'
alias lsd='ls -lha | grep --color=never "^d"'
alias lm='ls -m'
alias lt='ls -lht'
alias ltr='ls -lhtr'
alias lss='ls -lh --sort=size'
alias lssr='ls -lhr --sort=size'
alias saa='ssh-add ~/.ssh/*[dr]sa'
alias cdd='cd -'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias df="df -h"
alias du="du -h"
alias dus="du -sh"
alias gip="curl -s http://checkip.dyndns.com/ | sed 's/[^0-9\.]//g'"
alias vi='vim'
alias view='vim -R'
alias vit='vim -p'
alias vihs='vim -o'
alias vivs='vim -O'
alias lvim='vim -c "normal '\''0"'
alias lmvim='mvim -c "normal '\''0"'
alias sb='. ~/.bashrc'
alias eb='vi ~/.bashrc'
alias ev='vi ~/.vimrc'
alias et='vi ~/.tmux.conf'
alias resetTab='echo -ne "\033]6;1;bg;*;default\a"'
alias grep='grep --color'
alias gphpdoc="grep -E '^\s*/?\*+'"
#alias clnswp='find . -type f -name .*.sw[mnop] -exec rm -i {} \;'
alias clnswp='find . -name .*.sw[mnop] -type f -delete'
#alias clnmac='find . -type f -name ._* -exec rm -i {} \;'
alias clnmac="find . -name '*.DS_Store' -type f -delete"
alias gs='ps aux | grep [s]sh'
alias d='dirs -p'
alias cdn='pushd'
alias cdp='popd'

# run powerline if installed - it will handle prompt
# maybe needs better configuring, not crazy about default display, plus really slow
# if command -v powerline-daemon > /dev/null; then
# 	powerline-daemon -q
# 	POWERLINE_BASH_CONTINUATION=1
# 	POWERLINE_BASH_SELECT=1
# 	. /opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/powerline/bindings/bash/powerline.sh
# elif [ -f ~/.bash_prompt ]; then
if [ -f ~/.bash_prompt ]; then
	. ~/.bash_prompt
	# . ~/.bash-powerline.sh
else
	export PS1='\w\n\u@\h$ '
fi

## Functions
function f() {
	find . -name "$1"
}

function bak() {
	cp "$1" "$1.bak"
}

function gh() {
	history | grep "$1"
}

# Find a usable agent - fixes screen and tmux
function ssh-reagent () {
  export SSH_AUTH_SOCK=$(find /tmp/ssh-* -user `whoami` -name agent\* -printf '%T@ %p\n' 2>/dev/null | sort -k 1nr | sed 's/^[^ ]* //' | head -n 1)
  if $(ssh-add -l > /dev/null) ; then
    echo Found working SSH Agent:
    ssh-add -l
    return
  fi
  echo Cannot find ssh agent - maybe you should reconnect and forward it?
}


function backupConfigs() {
	if [[ -z $(ssh-add -l | grep 'aeric_id_rsa') ]]; then
		echo "aeric_id_rsa not loaded"
		return 1
	fi

	if [ -r ~/.bashrc ]; then
		scp ~/.bashrc $BAKHOST:media-directory/Configs/Bash/bashrc-$HOSTNAME
	fi

	if [ -r ~/.bash_profile ]; then
		scp ~/.bash_profile $BAKHOST:media-directory/Configs/Bash/bash_profile-$HOSTNAME
	fi

	if [ -r ~/.bash_prompt ]; then
		scp ~/.bash_prompt $BAKHOST:media-directory/Configs/Bash/bash_prompt-$HOSTNAME
	fi

	if [ -r ~/.inputrc ]; then
		scp ~/.inputrc $BAKHOST:media-directory/Configs/Bash/inputrc-$HOSTNAME
	fi

	if [ -r ~/.vimrc ]; then
		scp ~/.vimrc $BAKHOST:media-directory/Configs/Vim/vimrc-$HOSTNAME
	fi

	if [ -d .vim ]; then
		echo "VIM Directory"
		tar -chf - .vim | ssh $BAKHOST "cat > media-directory/Configs/Vim/vim-$HOSTNAME.tar"
	fi

	if [ -r ~/.screenrc ]; then
		scp ~/.screenrc $BAKHOST:media-directory/Configs/Screen/screenrc-$HOSTNAME
	fi

	if [ -r ~/.ssh/config ]; then
		scp ~/.ssh/config $BAKHOST:media-directory/Configs/Ssh/config-$HOSTNAME
	fi

	if [ -r ~/.tmux.conf ]; then
		scp ~/.tmux.conf $BAKHOST:media-directory/Configs/Tmux/tmux.conf-$HOSTNAME
	fi

	if [ -r ~/.Xmodmap ]; then
		scp ~/.Xmodmap $BAKHOST:media-directory/Configs/Xmodmap/Xmodmap-$HOSTNAME
	fi

	if [ -r ~/.xbmc/userdata/advancedsettings.xml ]; then
		scp ~/.xbmc/userdata/advancedsettings.xml $BAKHOST:media-directory/Configs/Xbmc/advancedsettings.xml-$HOSTNAME
	fi

	if [ -d /opt/local/etc/apache2 ]; then
		echo "Apache2 Conf Directory"
		tar -chf - /opt/local/etc/apache2 | ssh $BAKHOST "cat > media-directory/Configs/Apache/apache2-conf-$HOSTNAME.tar"
	fi
}
